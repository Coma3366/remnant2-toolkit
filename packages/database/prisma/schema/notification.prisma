// All known notification types, for use as a discriminator or filter
enum NotificationType {
  Announcement
  BuildNew
  BuildUpdate
}

// A per-user instance of a notification
model NotificationBase {
  // Common fields
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(name: "createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  target      User     @relation(name: "target", fields: [targetId], references: [id], onDelete: Cascade)
  targetId    String
  eventTime   DateTime
  read        Boolean  @default(false)
  hidden      Boolean  @default(false)

  // Individual notification types, selected by discriminator
  type                     NotificationType
  announcementNotification AnnouncementNotification?
  buildNewNotification     BuildNewNotification?
  buildUpdateNotification  BuildUpdateNotification?

  @@index([createdById])
  @@index([targetId])
}

// Extended schema for announcements
model AnnouncementNotification {
  notificationId   String           @id @default(cuid())
  notificationBase NotificationBase @relation(fields: [baseId], references: [id])
  baseId           String           @unique
}

// Extended schema for new builds
model BuildNewNotification {
  notificationId   String           @id @default(cuid())
  notificationBase NotificationBase @relation(fields: [baseId], references: [id])
  baseId           String           @unique

  follow   UserFollow @relation(fields: [followId], references: [id])
  followId String

  build   Build  @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId String

  @@index([buildId])
  @@index([followId])
}

// Extended schema for build updates
model BuildUpdateNotification {
  notificationId   String           @id @default(cuid())
  notificationBase NotificationBase @relation(fields: [baseId], references: [id])
  baseId           String           @unique

  follow   BuildFollow @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId String

  build   Build  @relation(fields: [buildId], references: [id], onDelete: Cascade)
  buildId String

  @@index([buildId])
  @@index([followId])
}
