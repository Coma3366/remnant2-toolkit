model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerType       String?
  providerId         String?
  providerAccountId  String
  refresh_token      String?   @db.Text
  refreshToken       String?
  access_token       String?   @db.Text
  accessToken        String?
  accessTokenExpires DateTime?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  user
  moderator
  admin
  owner
}

model User {
  id                String            @id @default(cuid())
  name              String?
  displayName       String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  role              UserRole          @default(user)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now()) @updatedAt
  accounts          Account[]
  sessions          Session[]
  Build             Build[]
  BuildVotes        BuildVoteCounts[]
  BuildReports      BuildReports[]
  BannedUsers       BannedUsers[]
  PaidUsers         PaidUsers[]
  UserProfile       UserProfile?
  UserLoadouts      UserLoadouts[]
  UserItems         UserItems[]
  LinkedBuild       LinkedBuild[]
  AuditLogUser      AuditLog[]        @relation(name: "user")
  AuditLogModerator AuditLog[]        @relation(name: "moderator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// TODO Make this non-plural
model BannedUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reason    String

  @@index([userId])
}

// TODO Make this non-plural
model PaidUsers {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}
