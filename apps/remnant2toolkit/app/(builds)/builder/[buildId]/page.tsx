import { type Metadata, type ResolvingMetadata } from 'next';

import { OG_IMAGE_URL, SITE_TITLE } from '@/app/_constants/meta';
import { isErrorResponse } from '@/app/_libs/is-error-response';
import { getBuild } from '@/app/(builds)/_actions/get-build';
import { getBuildVariants } from '@/app/(builds)/_actions/get-build-variants';
import { incrementViewCount } from '@/app/(builds)/_actions/increment-view-count';
import { cleanUpBuildState } from '@/app/(builds)/_libs/clean-up-build-state';
import { dbBuildToBuildState } from '@/app/(builds)/_libs/db-build-to-build-state';
import {
  type ArchetypeName,
  getArchetypeComboName,
} from '@/app/(builds)/_libs/get-archetype-combo-name';
import { type BuildState } from '@/app/(builds)/_types/build-state';
import { ViewBuildContainer } from '@/app/(builds)/builder/[buildId]/_components/view-build-container';
import { type LinkedBuildItem } from '@/app/(builds)/builder/linked/_types/linked-build-item';
export async function generateMetadata(
  { params: { buildId } }: { params: { buildId: string } },
  _parent: ResolvingMetadata,
): Promise<Metadata> {
  const buildData = await getBuild(buildId);

  if (isErrorResponse(buildData)) {
    console.info(buildData.errors);
    return {
      title: 'Error loading build',
      description:
        'There was an error loading this build. It may have been removed',
      openGraph: {
        title: 'Error loading build',
        description:
          'There was an error loading this build. It may have been removed',
        url: `https://remnant2toolkit.com/builder/${buildId}`,
        images: [
          {
            url: OG_IMAGE_URL,
            width: 150,
            height: 150,
          },
        ],
        type: 'website',
      },
      twitter: {
        title: 'Error loading build',
        description:
          'There was an error loading this build. It may have been removed',
      },
    };
  }

  const { build } = buildData;

  if (!build.isPublic) {
    return {
      title: 'Private Build',
      description: 'This build is private.',
      openGraph: {
        title: 'Private Build',
        description: 'This build is private.',
        url: `https://remnant2toolkit.com/builder/${build.id}`,
        images: [
          {
            url: OG_IMAGE_URL,
            width: 150,
            height: 150,
          },
        ],
        type: 'website',
      },
      twitter: {
        title: 'Private Build',
        description: 'This build is private.',
      },
    };
  }

  const buildState = dbBuildToBuildState(build);
  const archetypes = buildState.items.archetype.map(
    (a) => a?.name.toLowerCase(),
  );
  const buildLabel = getArchetypeComboName({
    archetype1: (archetypes[0] as ArchetypeName) ?? null,
    archetype2: (archetypes[1] as ArchetypeName) ?? null,
  });

  const title = `${build.name} by ${build.createdByDisplayName}`;
  let description = `${buildLabel} Build`;
  description += `\r\n`;
  description += `\r\n`;
  description +=
    build.description ?? 'A Remnant 2 Build, generated by Remnant 2 Toolkit';

  return {
    title,
    description,
    openGraph: {
      title,
      description: description,
      siteName: SITE_TITLE,
      url: `https://remnant2toolkit.com/builder/${build.id}`,
      images: [
        {
          url: OG_IMAGE_URL,
          width: 150,
          height: 150,
        },
      ],
      type: 'website',
    },
    twitter: {
      title,
      description,
    },
  };
}

export default async function Page({
  params: { buildId },
}: {
  params: { buildId: string };
}) {
  const buildData = await getBuild(buildId);

  if (isErrorResponse(buildData)) {
    console.info(buildData.errors);
    return (
      <p className="text-red text-center">
        There was an error loading this build. It may have been removed.
      </p>
    );
  }
  const { build } = buildData;

  const viewCountResponse = await incrementViewCount({
    buildId: build.id || '',
  });
  if (viewCountResponse.viewCount !== -1) {
    build.viewCount = viewCountResponse.viewCount;
  }

  const { buildVariants } = await getBuildVariants(buildId);

  // Need to loop over each id and fetch the build
  const buildVariantResponse = await Promise.all(
    buildVariants.map((buildVariant) => getBuild(buildVariant.buildId)),
  );

  const buildVariantBuilds: BuildState[] = [];
  for (const response of buildVariantResponse) {
    // if there is an error, remover item from array
    if (!isErrorResponse(response)) {
      buildVariantBuilds.push(
        cleanUpBuildState(dbBuildToBuildState(response.build)),
      );
    }
  }

  const linkedBuildItems: LinkedBuildItem[] = buildVariantBuilds.map(
    (variant) => ({
      build: buildVariantBuilds.find(
        (buildVariant) => buildVariant.buildId === variant.buildId,
      ) as BuildState,
      label: variant.name,
    }),
  );

  const buildVariantsToView = linkedBuildItems.map((linkedBuildItem) => ({
    ...linkedBuildItem,
    label: linkedBuildItem.build.name,
  }));
  // Add main build to the start
  buildVariantsToView.unshift({
    build: cleanUpBuildState(dbBuildToBuildState(build)),
    label: build.name,
  });

  return (
    <div className="flex w-full flex-col items-center">
      <div className="height-full flex w-full flex-col items-center justify-center">
        <ViewBuildContainer buildVariants={buildVariantsToView} />
      </div>
    </div>
  );
}
